// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  phoneNumber       String   @unique
  countryCode       String
  fullPhoneNumber   String   @unique // Combined country code + phone number
  deviceId          String   @unique
  isVerified        Boolean  @default(false)
  biometricEnabled  Boolean  @default(false)
  fcmToken          String?
  publicKey         String?  // For end-to-end encryption
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastActiveAt      DateTime @default(now())
  
  // Relationships
  verificationRequests VerificationRequest[]
  otpRequests         OTPRequest[]
  userSessions        UserSession[]
  userSettings        UserSettings?
  trustedCompanies    TrustedCompany[]
  blockedCompanies    BlockedCompany[]
  
  @@map("users")
}

model Company {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  website           String?
  logo              String?
  description       String?
  verified          Boolean            @default(false)
  trustLevel        TrustLevel         @default(MEDIUM)
  apiKey            String             @unique
  apiKeyHash        String             // Hashed version of API key
  webhookUrl        String?
  webhookSecret     String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Rate limiting
  requestsPerMinute Int                @default(10)
  requestsPerHour   Int                @default(100)
  requestsPerDay    Int                @default(1000)
  
  // Relationships
  verificationRequests VerificationRequest[]
  trustedByUsers      TrustedCompany[]
  blockedByUsers      BlockedCompany[]
  
  @@map("companies")
}

model VerificationRequest {
  id                String             @id @default(cuid())
  requestId         String             @unique // External request ID from company
  userId            String
  companyId         String
  phoneNumber       String
  status            VerificationStatus @default(PENDING)
  approved          Boolean?
  responseTime      DateTime?
  expiresAt         DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Additional data
  metadata          Json?              // Company-specific metadata
  userAgent         String?
  ipAddress         String?
  
  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@map("verification_requests")
}

model OTPRequest {
  id          String       @id @default(cuid())
  userId      String
  phoneNumber String
  otp         String       // Hashed OTP
  attempts    Int          @default(0)
  maxAttempts Int          @default(3)
  verified    Boolean      @default(false)
  expiresAt   DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relationships
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_requests")
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  refreshToken String    @unique
  deviceInfo   Json?     // Device information
  ipAddress    String?
  userAgent    String?
  isActive     Boolean   @default(true)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relationships
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // Notification settings
  notificationsEnabled  Boolean  @default(true)
  soundEnabled          Boolean  @default(true)
  vibrationEnabled      Boolean  @default(true)
  
  // Security settings
  biometricRequired     Boolean  @default(false)
  pinRequired           Boolean  @default(false)
  autoLockTimeout       Int      @default(5) // in minutes
  
  // Privacy settings
  dataSharingEnabled    Boolean  @default(false)
  analyticsEnabled      Boolean  @default(true)
  crashReportingEnabled Boolean  @default(true)
  
  // Auto-verification settings
  autoVerifyEnabled     Boolean  @default(false)
  
  // UI preferences
  theme                 Theme    @default(SYSTEM)
  language              String   @default("en")
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

model TrustedCompany {
  id         String   @id @default(cuid())
  userId     String
  companyId  String
  autoVerify Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  // Relationships
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyId])
  @@map("trusted_companies")
}

model BlockedCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  reason    String?
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyId])
  @@map("blocked_companies")
}

model AuditLog {
  id        String     @id @default(cuid())
  userId    String?
  companyId String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime   @default(now())
  
  @@map("audit_logs")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   // STRING, NUMBER, BOOLEAN, JSON
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
}

// Enums
enum VerificationStatus {
  PENDING
  APPROVED
  DECLINED
  EXPIRED
}

enum TrustLevel {
  LOW
  MEDIUM
  HIGH
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}