version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: truenumber-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: truenumber
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-truenumber_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init:/docker-entrypoint-initdb.d
    networks:
      - truenumber-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d truenumber"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: truenumber-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-truenumber_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - truenumber-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: truenumber-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: truenumber
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-truenumber_password}
      DB_SSL: false
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-truenumber_redis_password}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-development-jwt-secret-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-development-refresh-secret-change-in-production}
      
      # Encryption
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-development-encryption-key-change-in-production}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:19006}
      
      # Twilio (Optional for development)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      
      # Firebase (Optional for development)
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      
      # Features
      ENABLE_SWAGGER: true
      ENABLE_ANALYTICS: false
    ports:
      - "3000:3000"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - truenumber-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: truenumber-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - truenumber-network
    depends_on:
      - api
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  truenumber-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16